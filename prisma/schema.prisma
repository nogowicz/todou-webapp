generator client {
  provider = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model invitation {
  id        Int       @id @default(autoincrement())
  code      String    @unique(map: "code") @db.VarChar(255)
  listId    Int
  inviterId Int
  expiresAt DateTime  @db.DateTime(0)
  createdAt DateTime? @db.DateTime(0)
  list      list      @relation(fields: [listId], references: [listId], onDelete: NoAction, map: "invitation_ibfk_1")
  user      user      @relation(fields: [inviterId], references: [userId], onDelete: NoAction, map: "invitation_ibfk_2")

  @@index([inviterId], map: "inviterId")
  @@index([listId], map: "listId")
}

model list {
  listId       Int          @id @default(autoincrement())
  listName     String       @db.VarChar(45)
  iconId       Int          @default(0)
  canBeDeleted Boolean?     @default(true)
  isShared     Boolean?     @default(false)
  createdAt    DateTime?    @db.DateTime(0)
  isFavorite   Boolean?     @default(false)
  isArchived   Boolean?     @default(false)
  createdBy    Int?         @default(-1)
  colorVariant Int          @default(0)
  invitation   invitation[]
  task         task[]
  user         user[]
  userlist     userlist[]
}

model subtask {
  subtaskId   Int       @id @default(autoincrement())
  title       String    @db.VarChar(45)
  taskId      Int
  isCompleted Boolean?  @default(false)
  addedBy     String    @db.VarChar(45)
  createdAt   DateTime? @db.DateTime(0)
  task        task      @relation(fields: [taskId], references: [taskId], onDelete: Cascade, map: "subtask_ibfk_1")

  @@index([taskId], map: "taskId")
}

model task {
  taskId           Int              @id @default(autoincrement())
  title            String           @db.VarChar(45)
  listId           Int
  isCompleted      Boolean?         @default(false)
  deadline         DateTime?        @db.DateTime(0)
  importance       task_importance? @default(Not_important)
  urgency          task_urgency?    @default(Not_urgent)
  note             String?          @db.Text
  addedBy          Int
  assignedTo       Int
  createdAt        DateTime?        @db.DateTime(0)
  notificationTime DateTime?        @db.DateTime(0)
  subtask          subtask[]
  list             list             @relation(fields: [listId], references: [listId], onDelete: Cascade, map: "task_ibfk_1")

  @@index([listId], map: "listId")
}

model user {
  userId        Int          @id @default(autoincrement())
  firstName     String       @db.VarChar(30)
  lastName      String       @db.VarChar(45)
  email         String       @unique(map: "email") @db.VarChar(45)
  password      String       @db.VarChar(61)
  photo         Bytes?       @db.Blob
  idDefaultList Int
  createdAt     DateTime     @db.DateTime(0)
  isVerified    Boolean      @default(false)
  invitation    invitation[]
  list          list         @relation(fields: [idDefaultList], references: [listId], onDelete: NoAction, onUpdate: NoAction, map: "user_ibfk_1")
  userlist      userlist[]

  @@index([idDefaultList], map: "idDefaultList")
}

model userlist {
  listId Int
  userId Int
  list   list @relation(fields: [listId], references: [listId], onDelete: Cascade, map: "userlist_ibfk_1")
  user   user @relation(fields: [userId], references: [userId], onDelete: Cascade, map: "userlist_ibfk_2")

  @@id([listId, userId])
  @@unique([listId, userId], map: "UserList_listId_userId_unique")
  @@index([userId], map: "userId")
}

model session {
  id        Int      @id @default(autoincrement())
  userId    Int
  expiresAt DateTime @db.DateTime(0)

  @@index([userId], map: "userId")
}


enum task_importance {
  Important
  Not_important @map("Not important")
}

enum task_urgency {
  Urgent
  Not_urgent @map("Not urgent")
}
